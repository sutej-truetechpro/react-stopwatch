{"version":3,"sources":["timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","timer","handler","splitArr","time","updateTime","bind","startTimer","stopTimer","pauseTimer","resumeTimer","split","this","setState","Date","setInterval","clearInterval","newTime","setMilliseconds","getMilliseconds","moment","format","arr","push","console","log","items","entries","value","className","type","disabled","onClick","length","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oUAIqBA,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,QAAS,GACTC,SAAU,IAEd,EAAKC,KAAO,GACZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBACnB,EAAKK,MAAQ,EAAKA,MAAML,KAAX,gBAbE,E,0EAiBfM,KAAKC,SAAS,CAACV,SAAU,KACzBS,KAAKR,KAAO,IAAIU,KAAK,uBACrBF,KAAKP,aACLO,KAAKC,SACD,CAACX,QAASa,YAAYH,KAAKP,WAAY,S,mCAK3CW,cAAcJ,KAAKZ,MAAME,SACzBU,KAAKC,SAAS,CAACX,SAAS,M,oCAIxBU,KAAKC,SACD,CAACX,QAASa,YAAYH,KAAKP,WAAY,S,kCAK3CW,cAAcJ,KAAKZ,MAAME,SACzBU,KAAKC,SAAS,CACVX,SAAS,EACTD,MAAO,O,mCAKX,IAAIgB,EAAUL,KAAKR,KAAKc,gBAAgBN,KAAKR,KAAKe,kBAAoB,KACtEP,KAAKC,SAAS,CAACZ,MAAOmB,EAAOH,GAASI,OAAO,iB,8BAI7C,IAAIC,EAAMV,KAAKZ,MAAMG,SACrBmB,EAAIC,KAAKX,KAAKZ,MAAMC,OACpBW,KAAKC,SAAS,CAACV,SAAUmB,IACzBE,QAAQC,IAAI,QAASb,KAAKZ,MAAMG,Y,+BAIhC,IAAMuB,EAAQ,GADT,uBAGL,YAA6Bd,KAAKZ,MAAMG,SAASwB,UAAjD,+CAA4D,CAAC,IAAD,yBAAzCC,GAAyC,WACxDF,EAAMH,KACF,8BACI,yBAAKM,UAAU,8BACX,2BAAOA,UAAU,2BAA2BD,GAC5C,0BAAMC,UAAU,aAChB,yBAAKA,UAAU,YACX,2BAAOC,KAAK,OAAOD,UAAU,sBAV5C,kFAgBL,OACI,6BACI,yBAAKA,UAAW,WAAhB,cACA,4BAAQE,SAAUnB,KAAKZ,MAAME,QAAS8B,QAASpB,KAAKL,YAAa,QAAjE,UACA,4BAAQyB,QAASpB,KAAKD,OAAtB,SAGA,4BAAQoB,UAAWnB,KAAKZ,MAAME,QAAS8B,QAASpB,KAAKJ,WAArD,cACA,yBAAKqB,UAAW,SAAUjB,KAAKZ,MAAMC,OACpCW,KAAKZ,MAAMG,SAAS8B,OAAS,EAAI,yBAAKJ,UAAW,eAAgBH,GAAe,U,GAlF9DQ,IAAMC,YCQ1BC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.cfa1739f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as moment from 'moment'\r\nimport './Timer.scss'\r\n\r\nexport default class Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: '',\r\n            handler: '',\r\n            splitArr: []\r\n        };\r\n        this.time = '';\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.pauseTimer = this.pauseTimer.bind(this);\r\n        this.resumeTimer = this.resumeTimer.bind(this);\r\n        this.split = this.split.bind(this);\r\n    }\r\n\r\n    startTimer() {\r\n        this.setState({splitArr: []});\r\n        this.time = new Date('2000-01-01 00:00:00');\r\n        this.updateTime();\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    pauseTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({handler: false});\r\n    }\r\n\r\n    resumeTimer() {\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    stopTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({\r\n            handler: false,\r\n            timer: ''\r\n        });\r\n    }\r\n\r\n    updateTime() {\r\n        let newTime = this.time.setMilliseconds(this.time.getMilliseconds() + 100);\r\n        this.setState({timer: moment(newTime).format('mm:ss:SSS')});\r\n    }\r\n\r\n    split() {\r\n        let arr = this.state.splitArr;\r\n        arr.push(this.state.timer);\r\n        this.setState({splitArr: arr});\r\n        console.log('timer', this.state.splitArr);\r\n    }\r\n\r\n    render() {\r\n        const items = [];\r\n\r\n        for (const [index, value] of this.state.splitArr.entries()) {\r\n            items.push(\r\n                <form>\r\n                    <div className=\"form-group row mx-auto m-2\">\r\n                        <label className=\"col-sm-2 col-form-label\">{value}</label>\r\n                        <span className=\"col-sm-1\"/>\r\n                        <div className=\"col-sm-8\">\r\n                            <input type=\"text\" className=\"form-control\"/>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <div className={'heading'}>Stop Watch</div>\r\n                <button disabled={this.state.handler} onClick={this.startTimer}>{'Start'} Timer</button>\r\n                <button onClick={this.split}>Split</button>\r\n                {/*<button disabled={!this.state.handler} onClick={this.pauseTimer}>Pause Timer</button>*/}\r\n                {/*<button disabled={this.state.handler} onClick={this.resumeTimer}>Resume Timer</button>*/}\r\n                <button disabled={!this.state.handler} onClick={this.stopTimer}>Stop Timer</button>\r\n                <div className={'timer'}>{this.state.timer}</div>\r\n                {this.state.splitArr.length > 0 ? <div className={'comment-box'}>{items}</div> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from \"./timer/Timer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}