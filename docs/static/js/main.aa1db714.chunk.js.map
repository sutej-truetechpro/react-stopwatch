{"version":3,"sources":["timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","timer","handler","splitArr","time","updateTime","bind","startTimer","stopTimer","pauseTimer","resumeTimer","split","downloadCSV","this","setState","Date","setInterval","clearInterval","newTime","setMilliseconds","getMilliseconds","moment","format","arr","push","comment","console","log","index","splice","document","querySelectorAll","csvContent","csvLength","length","x","encodedUri","encodeURI","link","createElement","setAttribute","body","appendChild","click","items","value","className","key","onClick","deleteSplit","type","onChange","$event","updateComment","target","entries","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa1db714.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as moment from 'moment'\r\nimport './Timer.scss'\r\n\r\nexport default class Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: '',\r\n            handler: '',\r\n            splitArr: []\r\n        };\r\n        this.time = '';\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.pauseTimer = this.pauseTimer.bind(this);\r\n        this.resumeTimer = this.resumeTimer.bind(this);\r\n        this.split = this.split.bind(this);\r\n        this.downloadCSV = this.downloadCSV.bind(this);\r\n    }\r\n\r\n    startTimer() {\r\n        this.setState({splitArr: []});\r\n        this.time = new Date('2000-01-01 00:00:00');\r\n        this.updateTime();\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    pauseTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({handler: false});\r\n    }\r\n\r\n    resumeTimer() {\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    stopTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({\r\n            handler: false,\r\n            timer: ''\r\n        });\r\n    }\r\n\r\n    updateTime() {\r\n        let newTime = this.time.setMilliseconds(this.time.getMilliseconds() + 100);\r\n        this.setState({timer: moment(newTime).format('mm:ss:SSS')});\r\n    }\r\n\r\n    split() {\r\n        let arr = this.state.splitArr;\r\n        arr.push({time: this.state.timer, comment: ''});\r\n        this.setState({splitArr: arr});\r\n        console.log('timer', this.state.splitArr);\r\n    }\r\n\r\n    deleteSplit(index) {\r\n        console.log('index', index);\r\n        let arr = this.state.splitArr;\r\n        arr.splice(index, 1);\r\n        this.setState({splitArr: arr})\r\n    }\r\n\r\n    downloadCSV() {\r\n        let comments = document.querySelectorAll('.split-row .form-control');\r\n        let csvContent = \"data:text/csv;charset=utf-8,\";\r\n        csvContent += 'Time,Comments\\r\\n';\r\n        let csvLength = this.state.splitArr.length;\r\n        for (let x = 0; x < csvLength; x++) {\r\n            let row = this.state.splitArr[x].time + ',' + this.state.splitArr[x].comment;\r\n            csvContent += row + \"\\r\\n\";\r\n        }\r\n        var encodedUri = encodeURI(csvContent);\r\n        var link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", encodedUri);\r\n        link.setAttribute(\"download\", \"stop_watch.csv\");\r\n        document.body.appendChild(link); // Required for FF\r\n\r\n        link.click();\r\n    }\r\n\r\n    updateComment(comment, index) {\r\n        let arr = this.state.splitArr;\r\n        arr[index].comment = comment;\r\n        this.setState({splitArr: arr});\r\n        console.log('value', comment)\r\n    }\r\n\r\n    render() {\r\n        const items = [];\r\n\r\n        for (const [index, value] of this.state.splitArr.entries()) {\r\n            items.push(\r\n                <div className='row split-row align-items-center' key={index}>\r\n                    <div className=\"col-md-2\"><span className='px-2 fa fa-times'\r\n                                                    onClick={() => this.deleteSplit(index)}/></div>\r\n                    <div className=\"col-md-3 text-left\"><span className='px-2'>{value.time}</span></div>\r\n                    <div className=\"col-md-7 text-left\">\r\n                        <div className=\"px-2\">\r\n                            <input type=\"text\" onChange={($event) => this.updateComment($event.target.value, index)} value={value.comment} className=\"form-control comment\"/>\r\n                        </div>\r\n                    </div>\r\n                    {/*<div className=\"form-group row mx-auto m-2\">*/}\r\n                    {/*    <label className=\"col-sm-2 col-form-label\">{value}</label>*/}\r\n                    {/*    <span className=\"col-sm-1\"/>*/}\r\n                    {/*    <div className=\"col-sm-8\">*/}\r\n                    {/*        <input type=\"text\" className=\"form-control\"/>*/}\r\n                    {/*    </div>*/}\r\n                    {/*</div>*/}\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <div className={'heading'}>Stop Watch</div>\r\n                <button disabled={this.state.handler} onClick={this.startTimer}>{'Start'} Timer</button>\r\n                <button onClick={this.split}>Split</button>\r\n                {/*<button disabled={!this.state.handler} onClick={this.pauseTimer}>Pause Timer</button>*/}\r\n                {/*<button disabled={this.state.handler} onClick={this.resumeTimer}>Resume Timer</button>*/}\r\n                <button disabled={!this.state.handler} onClick={this.stopTimer}>Stop Timer</button>\r\n                <div className={'timer'}>{this.state.timer}</div>\r\n                {this.state.splitArr.length > 0 ? <div className='comment-box container'>\r\n                    <div className=\"row header\">\r\n                        <div className=\"col-md-5\"><span className='px-2'>Elapsed Time</span></div>\r\n                        <div className=\"col-md-7\"><span className='px-2'>Comments</span></div>\r\n                    </div>\r\n                    {items}\r\n                    <div className='download-button'>\r\n                        <button className='btn btn-primary' onClick={this.downloadCSV}>download CSV</button>\r\n                    </div>\r\n                </div> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from \"./timer/Timer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}