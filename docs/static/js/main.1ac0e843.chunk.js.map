{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","timer","handler","time","updateTime","bind","startTimer","stopTimer","pauseTimer","resumeTimer","this","Date","setState","setInterval","clearInterval","newTime","setMilliseconds","getMilliseconds","moment","format","className","disabled","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAIqBA,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,QAAS,IAEb,EAAKC,KAAO,GACZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBAXJ,E,0EAefK,KAAKP,KAAO,IAAIQ,KAAK,uBACrBD,KAAKN,aACLM,KAAKE,SACD,CAACV,QAASW,YAAYH,KAAKN,WAAY,S,mCAK3CU,cAAcJ,KAAKV,MAAME,SACzBQ,KAAKE,SAAS,CAACV,SAAS,M,oCAIxBQ,KAAKE,SACD,CAACV,QAASW,YAAYH,KAAKN,WAAY,S,kCAK3CU,cAAcJ,KAAKV,MAAME,SACzBQ,KAAKE,SAAS,CACVV,SAAS,EACTD,MAAO,O,mCAKX,IAAIc,EAAUL,KAAKP,KAAKa,gBAAgBN,KAAKP,KAAKc,kBAAoB,KACtEP,KAAKE,SAAS,CAACX,MAAOiB,EAAOH,GAASI,OAAO,iB,+BAI7C,OACI,6BACI,yBAAKC,UAAW,WAAhB,cACA,4BAAQC,SAAUX,KAAKV,MAAME,QAASoB,QAASZ,KAAKJ,YAApD,eACA,4BAAQe,UAAWX,KAAKV,MAAME,QAASoB,QAASZ,KAAKF,YAArD,eACA,4BAAQa,SAAUX,KAAKV,MAAME,QAASoB,QAASZ,KAAKD,aAApD,gBACA,4BAAQY,UAAWX,KAAKV,MAAME,QAASoB,QAASZ,KAAKH,WAArD,cACA,yBAAKa,UAAW,SAAUV,KAAKV,MAAMC,Y,GAvDlBsB,IAAMC,YCQ1BC,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ac0e843.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as moment from 'moment'\r\nimport './Timer.css'\r\n\r\nexport default class Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: '',\r\n            handler: ''\r\n        };\r\n        this.time = '';\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.pauseTimer = this.pauseTimer.bind(this);\r\n        this.resumeTimer = this.resumeTimer.bind(this);\r\n    }\r\n\r\n    startTimer() {\r\n        this.time = new Date('2000-01-01 00:00:00');\r\n        this.updateTime();\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    pauseTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({handler: false});\r\n    }\r\n\r\n    resumeTimer() {\r\n        this.setState(\r\n            {handler: setInterval(this.updateTime, 100)}\r\n        );\r\n    }\r\n\r\n    stopTimer() {\r\n        clearInterval(this.state.handler);\r\n        this.setState({\r\n            handler: false,\r\n            timer: ''\r\n        });\r\n    }\r\n\r\n    updateTime() {\r\n        let newTime = this.time.setMilliseconds(this.time.getMilliseconds() + 100);\r\n        this.setState({timer: moment(newTime).format('mm:ss:SSS')});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={'heading'}>Stop Watch</div>\r\n                <button disabled={this.state.handler} onClick={this.startTimer}>Start Timer</button>\r\n                <button disabled={!this.state.handler} onClick={this.pauseTimer}>Pause Timer</button>\r\n                <button disabled={this.state.handler} onClick={this.resumeTimer}>Resume Timer</button>\r\n                <button disabled={!this.state.handler} onClick={this.stopTimer}>Stop Timer</button>\r\n                <div className={'timer'}>{this.state.timer}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Timer from \"./Timer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}